{"ast":null,"code":"var _jsxFileName = \"/Users/han/Desktop/Final-Project\\u7684\\u526F\\u672C/src/explore/explore.js\";\nimport React, { Component } from 'react';\nimport { UpperContainer } from './exploreUpper.js';\nimport { SelectedPanel } from './exploreSelected.js';\nimport { CardContainer } from './explorePalettes.js';\nimport { Spinner } from '../common/spinner.js';\nimport { AlertBox } from '../common/alertBox.js';\nimport * as convert from 'color-convert'; // for converting color values\n\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\nimport './explore.css';\nexport class Explore extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleAddFilter = filter => {\n      if (!this.state.filterList.includes(filter)) {\n        let filters = this.state.filterList;\n        filters.push(filter);\n        let list = this.state.filteredPalettes.filter(palette => {\n          return palette.username === filter || convert.hex.keyword(palette.light_shade) === filter || convert.hex.keyword(palette.light_accent) === filter || convert.hex.keyword(palette.main) === filter || convert.hex.keyword(palette.dark_accent) === filter || convert.hex.keyword(palette.dark_shade) === filter;\n        });\n        this.setState({\n          filteredPalettes: list,\n          filterList: filters,\n          nFiltered: list.length\n        });\n      }\n    };\n\n    this.handleRemoveFilter = filter => {\n      let list = this.state.filterList.filter(data => {\n        return data !== filter;\n      });\n      this.setState({\n        filterList: list\n      }, () => {\n        if (this.state.filterList.length === 0) {\n          this.setState({\n            filteredPalettes: this.state.palettes,\n            nFiltered: this.state.palettes.length\n          });\n        } else {\n          let list = this.state.palettes;\n          let filterList = this.state.filterList;\n          list = list.filter(data => {\n            return filterList.includes(data.username) || filterList.includes(convert.hex.keyword(data.light_shade)) || filterList.includes(convert.hex.keyword(data.light_accent)) || filterList.includes(convert.hex.keyword(data.main)) || filterList.includes(convert.hex.keyword(data.dark_accent)) || filterList.includes(convert.hex.keyword(data.dark_shade));\n          });\n          this.setState({\n            filteredPalettes: list,\n            nFiltered: list.length\n          });\n        }\n      });\n    };\n\n    this.handleUpdateLock = (filter, lockId) => {\n      let currLockStatus = this.state.lockStatus;\n      let selectedColorNames = this.props.propList.selectedPalette.map(x => convert.hex.keyword(x));\n      let lockColor = selectedColorNames[lockId];\n\n      for (let i = 0; i < 5; i++) {\n        if (lockColor === selectedColorNames[i]) {\n          currLockStatus[i] = !currLockStatus[i];\n        }\n      }\n\n      if (currLockStatus[lockId]) {\n        this.handleAddFilter(filter);\n      } else {\n        this.handleRemoveFilter(filter);\n      }\n\n      this.setState({\n        lockStatus: currLockStatus\n      });\n    };\n\n    this.handleResetLock = () => {\n      this.setState({\n        lockStatus: [false, false, false, false, false]\n      });\n    };\n\n    this.handleUpdateQuery = input => {\n      let cleanedInput = input.toLowerCase().replace(/\\s+/g, '');\n      this.setState({\n        searchQuery: cleanedInput\n      });\n    };\n\n    this.handleError = msg => {\n      this.setState({\n        error: msg\n      });\n      setTimeout(() => {\n        this.setState({\n          error: ''\n        });\n      }, 3000);\n    };\n\n    this.state = {\n      palettes: [],\n      filteredPalettes: [],\n      nFiltered: 0,\n      error: '',\n      dataLoaded: false,\n      filterList: [],\n      lockStatus: [false, false, false, false, false],\n      searchQuery: ''\n    };\n  }\n\n  componentDidMount() {\n    this.palettesRef = firebase.database().ref('palettes');\n    this.palettesRef.on('value', snapshot => {\n      let palettesList = Object.keys(snapshot.val());\n      palettesList = palettesList.map(key => {\n        let paletteObj = snapshot.val()[key];\n        paletteObj['id'] = key;\n        return paletteObj;\n      });\n      this.setState({\n        palettes: palettesList,\n        filteredPalettes: palettesList,\n        nFiltered: palettesList.length,\n        dataLoaded: true\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.palettesRef.off();\n  } // adds new filter\n\n\n  render() {\n    let upperContainerProp = {\n      filterList: this.state.filterList,\n      handleAddFilter: this.handleAddFilter,\n      handleSearch: this.handleUpdateQuery,\n      searchQuery: this.state.searchQuery,\n      handleLock: this.handleUpdateLock,\n      handleRemoveFilter: this.handleRemoveFilter,\n      selectedPalette: this.props.propList.selectedPalette,\n      handleError: this.handleError,\n      UserImg: this.props.propList.UserImg,\n      followingNum: this.props.propList.currUsrFollowingNum,\n      followersNum: this.props.propList.currUsrFollowersNum,\n      UsrName: this.props.proplist.currUsrName,\n      UsrDesc: this.props.proplist.curr\n    };\n    let cardContainerProp = {\n      filteredData: this.state.filteredPalettes,\n      handleClick: this.props.propList.handleSelectPalette,\n      handleResetLock: this.handleResetLock\n    };\n    let selectedPanelProp = {\n      selected: this.props.propList.selected,\n      palette: this.props.propList.selectedPalette,\n      handleLock: this.handleUpdateLock,\n      lockStatus: this.state.lockStatus\n    };\n    return React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(UpperContainer, {\n      propList: upperContainerProp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(AlertBox, {\n      msg: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), !this.state.dataLoaded && React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(CardContainer, {\n      propList: cardContainerProp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(SelectedPanel, {\n      propList: selectedPanelProp,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/han/Desktop/Final-Project的副本/src/explore/explore.js"],"names":["React","Component","UpperContainer","SelectedPanel","CardContainer","Spinner","AlertBox","convert","firebase","Explore","constructor","props","handleAddFilter","filter","state","filterList","includes","filters","push","list","filteredPalettes","palette","username","hex","keyword","light_shade","light_accent","main","dark_accent","dark_shade","setState","nFiltered","length","handleRemoveFilter","data","palettes","handleUpdateLock","lockId","currLockStatus","lockStatus","selectedColorNames","propList","selectedPalette","map","x","lockColor","i","handleResetLock","handleUpdateQuery","input","cleanedInput","toLowerCase","replace","searchQuery","handleError","msg","error","setTimeout","dataLoaded","componentDidMount","palettesRef","database","ref","on","snapshot","palettesList","Object","keys","val","key","paletteObj","componentWillUnmount","off","render","upperContainerProp","handleSearch","handleLock","UserImg","followingNum","currUsrFollowingNum","followersNum","currUsrFollowersNum","UsrName","proplist","currUsrName","UsrDesc","curr","cardContainerProp","filteredData","handleClick","handleSelectPalette","selectedPanelProp","selected"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { UpperContainer } from './exploreUpper.js';\nimport { SelectedPanel } from './exploreSelected.js';\nimport {CardContainer } from './explorePalettes.js';\nimport { Spinner } from '../common/spinner.js';\nimport { AlertBox } from '../common/alertBox.js';\nimport * as convert from 'color-convert'; // for converting color values\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\nimport './explore.css';\n\nexport class Explore extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {palettes: [], filteredPalettes: [], nFiltered: 0, error: '', \n            dataLoaded: false, filterList: [], lockStatus: [false, false, false, false, false], searchQuery: ''}\n    }\n\n    componentDidMount() {\n        this.palettesRef = firebase.database().ref('palettes');\n        this.palettesRef.on('value', (snapshot => {\n            \n            let palettesList = Object.keys(snapshot.val());\n            palettesList = palettesList.map((key) => {\n                let paletteObj = snapshot.val()[key];\n                paletteObj['id'] = key;\n                return paletteObj;\n            })\n            \n            this.setState({palettes: palettesList, filteredPalettes: palettesList, nFiltered: palettesList.length, dataLoaded: true});\n        }));\n    }\n\n    componentWillUnmount() {\n        this.palettesRef.off();\n    }\n\n    // adds new filter\n    handleAddFilter = (filter) => {\n        if (!this.state.filterList.includes(filter)) {\n\n            let filters = this.state.filterList;\n            filters.push(filter);\n            \n            let list = this.state.filteredPalettes.filter((palette) => {\n                \n                return (palette.username === filter || convert.hex.keyword(palette.light_shade) === filter || \n                convert.hex.keyword(palette.light_accent) === filter || convert.hex.keyword(palette.main) === filter ||\n                convert.hex.keyword(palette.dark_accent) === filter || convert.hex.keyword(palette.dark_shade) === filter);\n            });\n            this.setState({ filteredPalettes: list , filterList: filters, nFiltered: list.length });\n        }\n    }\n\n    // remove an existing filter\n    handleRemoveFilter = (filter) => {\n        let list = this.state.filterList.filter((data) => {\n            return data !== filter;\n        })\n        this.setState({ filterList: list }, () => {\n            if (this.state.filterList.length === 0) {\n                this.setState({ filteredPalettes: this.state.palettes, nFiltered: this.state.palettes.length });\n            } else {\n                let list = this.state.palettes;\n                let filterList = this.state.filterList;\n                list = list.filter((data) => {\n                    return (filterList.includes(data.username) || filterList.includes(convert.hex.keyword(data.light_shade)) || \n                        filterList.includes(convert.hex.keyword(data.light_accent)) || filterList.includes(convert.hex.keyword(data.main)) ||\n                        filterList.includes(convert.hex.keyword(data.dark_accent)) || filterList.includes(convert.hex.keyword(data.dark_shade)));\n                });\n                \n                this.setState({ filteredPalettes: list , nFiltered: list.length});\n            }\n        });\n    }\n\n    // updates the color lock buttons\n    handleUpdateLock = (filter, lockId) => {\n        let currLockStatus = this.state.lockStatus;\n        \n        let selectedColorNames = this.props.propList.selectedPalette.map(x => convert.hex.keyword(x));\n        let lockColor = selectedColorNames[lockId];\n        for (let i = 0; i < 5; i++) {\n            if (lockColor === selectedColorNames[i]) {\n                currLockStatus[i] = !currLockStatus[i];\n            }\n        }\n        if (currLockStatus[lockId]) {\n            this.handleAddFilter(filter);\n        } else {\n            this.handleRemoveFilter(filter);\n        }\n        \n        this.setState({ lockStatus: currLockStatus });\n    }\n\n    // resets the color lock buttons\n    handleResetLock = () => {\n        this.setState({ lockStatus: [false, false, false, false, false] });\n    }\n    \n    // tracks the input in search box\n    handleUpdateQuery = (input) => {\n        let cleanedInput = input.toLowerCase().replace(/\\s+/g, '');\n        this.setState({ searchQuery: cleanedInput });\n    }\n\n    // shows the error message\n    handleError = (msg) => {\n        this.setState({ error: msg });\n        setTimeout(() => {\n            this.setState({ error: '' });\n        }, 3000);\n    }\n\n    render() {\n\n        let upperContainerProp = {filterList: this.state.filterList, handleAddFilter: this.handleAddFilter, handleSearch: this.handleUpdateQuery,\n            searchQuery: this.state.searchQuery, handleLock: this.handleUpdateLock, handleRemoveFilter: this.handleRemoveFilter,\n            selectedPalette: this.props.propList.selectedPalette, handleError: this.handleError, UserImg: this.props.propList.UserImg\n            , followingNum: this.props.propList.currUsrFollowingNum, followersNum: this.props.propList.currUsrFollowersNum,\n            UsrName: this.props.proplist.currUsrName, UsrDesc: this.props.proplist.curr};\n        \n        let cardContainerProp = {filteredData: this.state.filteredPalettes, handleClick: this.props.propList.handleSelectPalette, \n            handleResetLock: this.handleResetLock};\n\n        let selectedPanelProp = {selected: this.props.propList.selected, palette: this.props.propList.selectedPalette, handleLock: this.handleUpdateLock, \n            lockStatus: this.state.lockStatus}\n\n        return (\n            <main>\n                <UpperContainer propList={upperContainerProp} />\n                <AlertBox msg={this.state.error}/>\n                {!this.state.dataLoaded && <Spinner />}\n                <CardContainer propList={cardContainerProp} />\n                <SelectedPanel propList={selectedPanelProp} />\n            </main>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}