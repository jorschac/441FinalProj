{"ast":null,"code":"var _jsxFileName = \"/Users/han/Desktop/Final-Project/src/create/create.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { Spinner } from '../common/spinner.js';\nimport { AlertBox } from '../common/alertBox.js';\nimport './create.css';\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\nexport class Create extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClickColor = (color, index) => {\n      let newActiveColor = [false, false, false, false, false];\n      newActiveColor[index] = !newActiveColor[index];\n      let newDescription = {};\n\n      if (index === 0) {\n        newDescription = {\n          type: 'Light Shade',\n          p1: 'This will be the lightest color of your design.',\n          p2: 'Light background and texts on dark background should look great with this color.'\n        };\n      } else if (index === 1) {\n        newDescription = {\n          type: 'Light Accent',\n          p1: 'This color can be used to attract certain element of your design.',\n          p2: 'Look for a color that is contrasting with the rest of your design.'\n        };\n      } else if (index === 2) {\n        newDescription = {\n          type: 'Main Color',\n          p1: 'This color shows the identity of your design.',\n          p2: 'Look for a color that is both striking and easy on the eye.'\n        };\n      } else if (index === 3) {\n        newDescription = {\n          type: 'Dark Accent',\n          p1: 'This is the second accent color for your design.',\n          p2: 'Look for a color that is contrasting with the rest of your design.'\n        };\n      } else {\n        newDescription = {\n          type: 'Dark Shade',\n          p1: 'This will be the darkest color of your design.',\n          p2: 'Dark background and texts on light background should look great with this color.'\n        };\n      }\n\n      this.setState({\n        currentColor: color,\n        activeColor: newActiveColor,\n        description: newDescription\n      });\n    };\n\n    this.handleChange = color => {\n      this.setState({\n        currentColor: color.hex\n      });\n      this.props.handleCreateChange(color.hex, this.state.activeColor.indexOf(true));\n    };\n\n    this.postPalette = event => {\n      event.preventDefault();\n      let alertMsg = '';\n      let username = this.state.username;\n\n      if (username === '') {\n        alertMsg = 'Please enter your artist name to save';\n      } else if (/\\s/.test(username)) {\n        alertMsg = 'Artist name cannot have spaces or tabs';\n      } else if (username.length > 10) {\n        alertMsg = 'Artist name cannot be more than 10 characters';\n      } else {\n        let newPalette = {\n          dark_accent: this.props.selectedPalette[3],\n          dark_shade: this.props.selectedPalette[4],\n          light_accent: this.props.selectedPalette[1],\n          light_shade: this.props.selectedPalette[0],\n          main: this.props.selectedPalette[2],\n          username: username\n        };\n        this.palettesRef.push(newPalette);\n        alertMsg = 'Saved successfully';\n      }\n\n      this.setState({\n        alert: alertMsg\n      });\n    };\n\n    this.handleAlert = msg => {\n      this.setState({\n        alert: msg\n      });\n      setTimeout(() => {\n        this.setState({\n          alert: ''\n        });\n      }, 3000);\n    };\n\n    this.trackInput = input => {\n      this.setState({\n        username: input.target.value\n      });\n    };\n\n    this.state = {\n      currentColor: this.props.selectedPalette[2],\n      username: '',\n      activeColor: [false, false, true, false, false],\n      description: {\n        type: 'Main Color',\n        p1: 'This color shows the identity of your design.',\n        p2: 'Look for a color that is both striking and easy on the eye.'\n      },\n      dataLoaded: false,\n      alert: ''\n    };\n  }\n\n  componentDidMount() {\n    this.palettesRef = firebase.database().ref('palettes');\n    this.palettesRef.on('value', snapshot => {\n      this.setState({\n        palettes: snapshot.val(),\n        dataLoaded: true\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.palettesRef.off();\n  }\n\n  render() {\n    let selectedPalette = [];\n\n    for (let i = 0; i < this.props.selectedPalette.length; i++) {\n      selectedPalette.push(React.createElement(SelectedPalette, {\n        color: this.props.selectedPalette[i],\n        colorId: i,\n        handleClickColor: this.handleClickColor,\n        active: this.state.activeColor[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }));\n    }\n\n    let indicators = this.state.activeColor.map(state => React.createElement(ShowSelected, {\n      active: state,\n      color: this.state.currentColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }));\n    return React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      id: \"uppercontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Create Your Palette\")), React.createElement(\"section\", {\n      id: \"createcontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, !this.state.dataLoaded ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"savepalette\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(AlertBox, {\n      msg: this.state.alert,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"savebox\",\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"createname\",\n      placeholder: \"Type your artist name to save\",\n      \"aria-label\": \"name input\",\n      onChange: this.trackInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      id: \"savebutton\",\n      \"aria-label\": \"save palette\",\n      onClick: this.postPalette,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Save\"))), React.createElement(\"div\", {\n      className: \"createcolor\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, selectedPalette), React.createElement(\"section\", {\n      id: \"showselectedcontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, indicators), React.createElement(\"div\", {\n      id: \"colorpicker\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Description, {\n      description: this.state.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(ChromePicker, {\n      disableAlpha: true,\n      color: this.state.currentColor,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nclass SelectedPalette extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      this.props.handleClickColor(this.props.color, this.props.colorId);\n    };\n  }\n\n  render() {\n    let color = {\n      backgroundColor: this.props.color\n    };\n    return React.createElement(\"div\", {\n      className: \"color\",\n      style: color,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass ShowSelected extends Component {\n  render() {\n    if (!this.props.active) {\n      return React.createElement(\"div\", {\n        className: \"selectedindicator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      });\n    }\n\n    let style = {\n      backgroundColor: this.props.color,\n      boxShadow: '0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 3px 0 rgba(0, 0, 0, 0.12)'\n    };\n    return React.createElement(\"div\", {\n      className: \"selectedindicator\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass Description extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      id: \"colordescription\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.props.description.type), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, this.props.description.p1), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, this.props.description.p2));\n  }\n\n}","map":{"version":3,"sources":["/Users/han/Desktop/Final-Project/src/create/create.js"],"names":["React","Component","ChromePicker","Spinner","AlertBox","firebase","Create","constructor","props","handleClickColor","color","index","newActiveColor","newDescription","type","p1","p2","setState","currentColor","activeColor","description","handleChange","hex","handleCreateChange","state","indexOf","postPalette","event","preventDefault","alertMsg","username","test","length","newPalette","dark_accent","selectedPalette","dark_shade","light_accent","light_shade","main","palettesRef","push","alert","handleAlert","msg","setTimeout","trackInput","input","target","value","dataLoaded","componentDidMount","database","ref","on","snapshot","palettes","val","componentWillUnmount","off","render","i","indicators","map","SelectedPalette","handleClick","colorId","backgroundColor","ShowSelected","active","style","boxShadow","Description"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport { Spinner } from '../common/spinner.js';\nimport { AlertBox } from '../common/alertBox.js';\nimport './create.css';\nimport firebase from \"firebase/app\";\nimport 'firebase/database';\n\nexport class Create extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {currentColor: this.props.selectedPalette[2], username: '', activeColor: [false, false, true, false, false], \n            description: {type: 'Main Color', p1: 'This color shows the identity of your design.', \n                p2: 'Look for a color that is both striking and easy on the eye.'}, dataLoaded: false, alert: ''}\n    }\n\n    componentDidMount() {\n        this.palettesRef = firebase.database().ref('palettes');\n        this.palettesRef.on('value', (snapshot => {\n            this.setState({palettes: snapshot.val(), dataLoaded: true});\n        }));\n    }\n\n    componentWillUnmount() {\n        this.palettesRef.off();\n    }\n\n    handleClickColor = (color, index) => {\n        let newActiveColor = [false, false, false, false, false];\n        newActiveColor[index] = !newActiveColor[index];\n        let newDescription = {};\n        if (index === 0) {\n            newDescription = {type: 'Light Shade', p1: 'This will be the lightest color of your design.', \n                p2: 'Light background and texts on dark background should look great with this color.'};\n        } else if (index === 1) {\n            newDescription = {type: 'Light Accent', p1: 'This color can be used to attract certain element of your design.', \n                p2: 'Look for a color that is contrasting with the rest of your design.'};\n        } else if (index === 2) {\n            newDescription = {type: 'Main Color', p1: 'This color shows the identity of your design.', \n                p2: 'Look for a color that is both striking and easy on the eye.'};\n        } else if (index === 3) {\n            newDescription = {type: 'Dark Accent', p1: 'This is the second accent color for your design.', \n                p2: 'Look for a color that is contrasting with the rest of your design.'};\n        } else {\n            newDescription = {type: 'Dark Shade', p1: 'This will be the darkest color of your design.', \n                p2: 'Dark background and texts on light background should look great with this color.'};\n        }\n        this.setState({currentColor: color, activeColor: newActiveColor, description: newDescription});\n    }\n\n    handleChange = (color) => {\n        this.setState({currentColor: color.hex});\n        this.props.handleCreateChange(color.hex, this.state.activeColor.indexOf(true));\n    }\n\n    postPalette = (event) => {\n        event.preventDefault();\n        let alertMsg = '';\n        let username = this.state.username;\n\n        if (username === '') {\n            alertMsg = 'Please enter your artist name to save';\n        } else if (/\\s/.test(username)) {\n            alertMsg = 'Artist name cannot have spaces or tabs';\n        } else if (username.length > 10) {\n            alertMsg = 'Artist name cannot be more than 10 characters';\n        } else {\n            let newPalette = {dark_accent: this.props.selectedPalette[3], dark_shade: this.props.selectedPalette[4], \n                light_accent: this.props.selectedPalette[1], light_shade: this.props.selectedPalette[0], \n                main: this.props.selectedPalette[2], username: username};\n            \n            this.palettesRef.push(newPalette);\n            alertMsg = 'Saved successfully';\n        }\n        this.setState({alert: alertMsg});\n    }\n\n    handleAlert = (msg) => {\n        this.setState({ alert: msg });\n        setTimeout(() => {\n            this.setState({ alert: '' });\n        }, 3000);\n    }\n\n    trackInput = (input) => {\n        this.setState({username: input.target.value});\n    }\n\n    render() {\n        let selectedPalette = [];\n        for (let i = 0; i < this.props.selectedPalette.length; i++) {\n            selectedPalette.push(<SelectedPalette color={this.props.selectedPalette[i]} colorId={i} \n                handleClickColor={this.handleClickColor} active={this.state.activeColor[i]}/>);\n        }\n        let indicators = this.state.activeColor.map(state => <ShowSelected active={state} color={this.state.currentColor}/>);\n        return (\n            <main>\n                <section id=\"uppercontainer\">\n                    <h2>Create Your Palette</h2>\n                </section>\n                <section id='createcontainer'>\n                    {!this.state.dataLoaded ? <Spinner /> : \n                    <div>\n                        <div id='savepalette'>\n                            <AlertBox msg={this.state.alert} />\n                            <form className=\"savebox\" action=\"\">\n                                <input type='text' id='createname' placeholder='Type your artist name to save' aria-label=\"name input\"\n                                    onChange={this.trackInput} />\n                                <button type='submit' id='savebutton' aria-label=\"save palette\" onClick={this.postPalette}>Save</button>\n                            </form>\n                        </div>\n                        <div className='createcolor'>\n                            {selectedPalette}\n                        </div>\n                        <section id='showselectedcontainer'>\n                            {indicators}\n                        </section>\n                        <div id='colorpicker'>\n                            <Description description={this.state.description}/>\n                            <ChromePicker disableAlpha={true} color={this.state.currentColor} onChange={this.handleChange}/>\n                        </div>\n                    </div>}\n                </section>\n            </main>\n        );\n    }\n}\n\nclass SelectedPalette extends Component {\n    handleClick = () => {\n        this.props.handleClickColor(this.props.color, this.props.colorId);\n    }\n\n    render() {\n        let color = {backgroundColor: this.props.color};\n        return (\n            <div className=\"color\" style={color} onClick={this.handleClick}></div>\n        );\n    }\n}\n\nclass ShowSelected extends Component {\n    render() {\n        if (!this.props.active) {\n            return <div className='selectedindicator'></div>;\n        }\n        let style = {backgroundColor: this.props.color, boxShadow: '0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 2px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 3px 0 rgba(0, 0, 0, 0.12)'};\n        return <div className='selectedindicator' style={style}></div>\n    }\n}\n\nclass Description extends Component {\n    render() {\n        return (\n            <div id='colordescription'>\n                <h3>{this.props.description.type}</h3>\n                <p>{this.props.description.p1}</p>\n                <p>{this.props.description.p2}</p>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}