{"ast":null,"code":"var _jsxFileName = \"/Users/han/Desktop/Final-Project\\u7684\\u526F\\u672C/src/explore/exploreSelected.js\";\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\nimport * as convert from 'color-convert';\nexport class SelectedPanel extends Component {\n  render() {\n    if (this.props.propList.selected) {\n      let optionLabels = [{\n        id: 0,\n        color: 'light shade'\n      }, {\n        id: 1,\n        color: 'light accent'\n      }, {\n        id: 2,\n        color: 'main color'\n      }, {\n        id: 3,\n        color: 'dark accent'\n      }, {\n        id: 4,\n        color: 'dark shade'\n      }];\n      let optionContainerProp = {\n        palette: this.props.propList.palette,\n        handleLock: this.props.propList.handleLock\n      };\n      let optionContainers = optionLabels.map(x => React.createElement(OptionContainer, {\n        label: x,\n        key: 'option' + x.id,\n        propList: optionContainerProp,\n        locked: this.props.propList.lockStatus[x.id],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }));\n      let selectedPalette = optionLabels.map(x => React.createElement(SelectedPalette, {\n        colorId: x.id,\n        key: 'color' + x.id,\n        palette: this.props.propList.palette,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }));\n      return React.createElement(\"div\", {\n        id: \"selectedpanel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"selectedpalette\",\n        \"aria-label\": \"selected palette\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, selectedPalette), React.createElement(\"div\", {\n        id: \"coloroption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, optionContainers));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass SelectedPalette extends Component {\n  render() {\n    let color = {\n      backgroundColor: this.props.palette[this.props.colorId]\n    };\n    return React.createElement(\"div\", {\n      className: \"color\",\n      id: 'color' + this.props.colorId,\n      style: color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n}\n\nclass OptionContainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = () => {\n      let filter = convert.hex.keyword(this.props.propList.palette[this.props.label.id]);\n      this.props.propList.handleLock(filter, this.props.label.id);\n    };\n  }\n\n  render() {\n    let className = 'lock';\n\n    if (this.props.locked) {\n      className += ' locked';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"optioncontainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"hex\",\n      \"aria-label\": 'selected ' + this.props.label.color,\n      \"aria-live\": \"polite\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.props.propList.palette[this.props.label.id]), React.createElement(\"button\", {\n      className: className,\n      id: 'lock' + this.props.label.id,\n      \"aria-label\": \"color lock\",\n      \"aria-pressed\": \"true\",\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(FontAwesomeIcon, {\n      icon: faLock,\n      className: \"fa-lock\",\n      \"aria-label\": \"menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/han/Desktop/Final-Project的副本/src/explore/exploreSelected.js"],"names":["React","Component","FontAwesomeIcon","faLock","convert","SelectedPanel","render","props","propList","selected","optionLabels","id","color","optionContainerProp","palette","handleLock","optionContainers","map","x","lockStatus","selectedPalette","SelectedPalette","backgroundColor","colorId","OptionContainer","handleClick","filter","hex","keyword","label","className","locked"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\nimport * as convert from 'color-convert';\n\nexport class SelectedPanel extends Component {\n    render() {\n        if (this.props.propList.selected) {\n            let optionLabels = [{id: 0, color: 'light shade'}, {id: 1, color: 'light accent'}, {id: 2, color: 'main color'},\n            {id: 3, color: 'dark accent'}, {id: 4, color: 'dark shade'}];\n\n            let optionContainerProp = {palette: this.props.propList.palette, handleLock: this.props.propList.handleLock};\n            let optionContainers = optionLabels.map(x => <OptionContainer label={x} key={'option' + x.id} propList={optionContainerProp}\n                locked={this.props.propList.lockStatus[x.id]} />);\n\n            let selectedPalette = optionLabels.map(x => <SelectedPalette colorId={x.id} key={'color' + x.id} \n                palette={this.props.propList.palette} />);\n            return (\n                <div id=\"selectedpanel\">\n                    <div id=\"selectedpalette\" aria-label=\"selected palette\">\n                        {selectedPalette}\n                    </div>\n                    <div id=\"coloroption\">\n                        {optionContainers}\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div></div>\n        );\n    }\n}\n\nclass SelectedPalette extends Component {\n    render() {\n        let color = {backgroundColor: this.props.palette[this.props.colorId]};\n        return (\n            <div className=\"color\" id={'color' + this.props.colorId} style={color}></div>\n        );\n    }\n}\n\nclass OptionContainer extends Component {\n    handleClick = () => {\n        let filter = convert.hex.keyword(this.props.propList.palette[this.props.label.id]);\n        this.props.propList.handleLock(filter, this.props.label.id);\n    }\n\n    render() {\n        let className = 'lock';\n        if (this.props.locked) {\n            className += ' locked';\n        }\n\n        return (\n            <div className=\"optioncontainer\">\n                <p className=\"hex\" aria-label={'selected ' + this.props.label.color} aria-live=\"polite\">\n                    {this.props.propList.palette[this.props.label.id]}\n                </p>\n                <button className={className} id={'lock' + this.props.label.id} aria-label=\"color lock\" aria-pressed=\"true\" \n                onClick={this.handleClick}>\n                    <FontAwesomeIcon icon={faLock} className='fa-lock' aria-label='menu' />\n                </button>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}